context.modules = [
    { name = libpipewire-module-filter-chain
        args = {
            node.description = "Crossover OB1 HQ"
            media.name       = "Crossover OB1 HQ"
            filter.graph = {
                nodes = [
                    { type = builtin label = copy name = copyFL  }
                    { type = builtin label = copy name = copyFR  }

                    { type = builtin label = convolver name = convHP_L config = { filename = "/etc/pipewire/filter-chain.conf.d/HP_HQ.wav" channel =  0 } }
                    { type = builtin label = convolver name = convHP_R config = { filename = "/etc/pipewire/filter-chain.conf.d/HP_HQ.wav" channel =  0 } }
                    { type = builtin label = convolver name = convMP_L config = { filename = "/etc/pipewire/filter-chain.conf.d/MP_HQ.wav" channel =  0 } }
                    { type = builtin label = convolver name = convMP_R config = { filename = "/etc/pipewire/filter-chain.conf.d/MP_HQ.wav" channel =  0 } }
                    { type = builtin label = convolver name = convLP_L config = { filename = "/etc/pipewire/filter-chain.conf.d/LP_HQ.wav" channel =  0 } }
                    { type = builtin label = convolver name = convLP_R config = { filename = "/etc/pipewire/filter-chain.conf.d/LP_HQ.wav" channel =  0 } }

                    { type = builtin label = mixer name = mixHP_L }
                    { type = builtin label = mixer name = mixHP_R }
                    { type = builtin label = mixer name = mixMP_L }
                    { type = builtin label = mixer name = mixMP_R }
                    { type = builtin label = mixer name = mixLP_L }
                    { type = builtin label = mixer name = mixLP_R }

                ]
                links = [
                    { output = "copyFL:Out"  input="convHP_L:In"  }
                    { output = "copyFR:Out"  input="convHP_R:In"  }
                    { output = "copyFL:Out"  input="convMP_L:In"  }
                    { output = "copyFR:Out"  input="convMP_R:In"  }
                    { output = "copyFL:Out"  input="convLP_L:In"  }
                    { output = "copyFR:Out"  input="convLP_R:In"  }

                    { output = "convHP_L:Out"  input="mixHP_L:In 1" }
                    { output = "convHP_R:Out"  input="mixHP_R:In 1" }
                    { output = "convMP_L:Out"  input="mixMP_L:In 1" }
                    { output = "convMP_R:Out"  input="mixMP_R:In 1" }
                    { output = "convLP_L:Out"  input="mixLP_L:In 1" }
                    { output = "convLP_R:Out"  input="mixLP_R:In 1" }
                ]
                inputs  = [ "copyFL:In" "copyFR:In" ]
                outputs = [ "mixHP_L:Out" "mixHP_R:Out" "mixMP_L:Out" "mixMP_R:Out" "mixLP_L:Out" "mixLP_R:Out" ]
            }
            capture.props = {
                media.class    = Audio/Sink
                audio.channels = 2
                audio.position = [ FL FR ]
            }
            playback.props = {
                node.target = "alsa_output.usb-0d8c_USB_Sound_Device-00.analog-surround-51"
                node.passive   = true
                audio.channels = 6
                audio.position = [ FL FR RL RR FC LFE ]
            }
        }
    }
]